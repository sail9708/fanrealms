<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kali DDoS-python脚本使用</title>
    <url>/2020/03/31/Kali-DDoS-python%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<hr>
<center> 
利用来源于GitHub的python脚本，实现DDoS attack。
From：https://github.com/Ha3MrX/DDos-Attack
Environment：Kali Linux
</center>

<hr>
<a id="more"></a>

<h4 id="1-使用git从GitHub克隆到本地"><a href="#1-使用git从GitHub克隆到本地" class="headerlink" title="1. 使用git从GitHub克隆到本地"></a>1. 使用git从GitHub克隆到本地</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Ha3MrX/DDos-Attack</span><br></pre></td></tr></table></figure>

<h4 id="2-进入文件目录-DDos-Attack-并设置权限"><a href="#2-进入文件目录-DDos-Attack-并设置权限" class="headerlink" title="2. 进入文件目录 DDos-Attack 并设置权限"></a>2. 进入文件目录 DDos-Attack 并设置权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> DDos-Attack              <span class="comment">#进入目录</span></span><br><span class="line">chmod +x ddos-attack.py     <span class="comment">#设置权限</span></span><br></pre></td></tr></table></figure>

<h4 id="3-运行脚本"><a href="#3-运行脚本" class="headerlink" title="3. 运行脚本"></a>3. 运行脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ddos-attack.py       <span class="comment">#运行脚本</span></span><br></pre></td></tr></table></figure>

<p>输入IP地址开始</p>
<p><img src="/2020/03/31/Kali-DDoS-python%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20200331204023684.png" alt="image-20200331204023684"></p>
<p><code>Crtl+C</code> 结束</p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>DDoS</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>国密算法学习记录</title>
    <url>/2020/01/23/%E5%9B%BD%E5%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="SM1对称密码"><a href="#SM1对称密码" class="headerlink" title="SM1对称密码"></a>SM1对称密码</h3><ul>
<li>分组密码算法<ul>
<li>分组长度：128位</li>
<li>密钥长度：128bit</li>
</ul>
</li>
<li>算法安全保密强度以及软硬件的实现性能与AES相当，密码算法不公开，仅以IP核的形式存在于芯片中</li>
<li>主要应用于芯片、智能IC卡等安全产品。广泛应用于电子政务、电子商务等应用领域</li>
</ul>
<h3 id="SM2椭圆曲线公钥密码——基于ECC"><a href="#SM2椭圆曲线公钥密码——基于ECC" class="headerlink" title="SM2椭圆曲线公钥密码——基于ECC"></a>SM2椭圆曲线公钥密码——基于ECC</h3><h4 id="1-SM2简介"><a href="#1-SM2简介" class="headerlink" title="1 SM2简介"></a>1 SM2简介</h4><ul>
<li><p>SM2就是ECC椭圆曲线密码机制，但在签名和密钥交换方面不同于ECDS、ECDH等国际标准，采用更为安全的机制。另外，SM2推荐了一条256位的曲线作为标准曲线。</p>
</li>
<li><p>SM2标准：包括总则、数字签名算法、密钥交换协议、公钥加密算法四个部分</p>
</li>
<li><p>SM2算法主要考虑素域Fp和F2m上的椭圆曲线</p>
</li>
<li><p>SM2算法优于RSA算法</p>
<p>安全性对比：</p>
<table>
<thead>
<tr>
<th align="center">RSA密钥强度（长度）</th>
<th align="center">SM2密钥强度（长度）</th>
<th align="center">破解时间（年）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">521比特</td>
<td align="center">106比特</td>
<td align="center">104（已破解）</td>
</tr>
<tr>
<td align="center">768比特</td>
<td align="center">132比特</td>
<td align="center">108（已破解）</td>
</tr>
<tr>
<td align="center">1024比特</td>
<td align="center">160比特</td>
<td align="center">1011</td>
</tr>
<tr>
<td align="center">2048比特</td>
<td align="center">210比特</td>
<td align="center">1020</td>
</tr>
</tbody></table>
<p>速度对比：</p>
<table>
<thead>
<tr>
<th align="center">算法</th>
<th align="center">签名速度</th>
<th align="center">验签速度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1024 RSA</td>
<td align="center">2729次/秒</td>
<td align="center">51224次/秒</td>
</tr>
<tr>
<td align="center">2048 RSA</td>
<td align="center">455次/秒</td>
<td align="center">15122次/秒</td>
</tr>
<tr>
<td align="center">256 SM2</td>
<td align="center">4095次/秒</td>
<td align="center">871次/秒</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="2-SM2算法详解"><a href="#2-SM2算法详解" class="headerlink" title="2 SM2算法详解"></a>2 SM2算法详解</h4><h5 id="2-1-算法数学性质"><a href="#2-1-算法数学性质" class="headerlink" title="2.1 算法数学性质"></a>2.1 算法数学性质</h5><ul>
<li><strong>椭圆曲线算法公钥密码所基于的曲线性质</strong>：椭圆曲线多倍点运算构成了一个单向函数。在多倍点运算中，已知多倍点与基点，求解倍数的问题称为<u><strong>椭圆曲线离散对数问题</strong></u>。对于一般椭圆曲线的离散对数问题，目前只存在<strong>指数级</strong>计算复杂度的求解方法。与大数分解问题以及有限域上离散对数问题相比，椭圆曲线离散对数问题的求解难度要大得多。因此<u>在相同安全强度的要求下，椭圆曲线密码相较于其他公钥密码所需的密钥规模要小得多。</u></li>
<li><strong>数字签名算法:</strong>由一个签名者对数据进行签名，并由一个验证者验证签名的可靠性。每个签名者都有一个公钥和一个私钥，其中私钥用来产生签名，验证者用签名者的公钥对签名进行验证。在签名的生成过程之前，要用<strong>密码杂凑算法</strong>对$Z_A$和待签消息$M$进行压缩；在验证过程之前，也要用<strong>密码杂凑算法</strong>对$Z_A$和$M$进行同样的压缩。</li>
</ul>
<h5 id="2-2-基础参数"><a href="#2-2-基础参数" class="headerlink" title="2.2 基础参数"></a>2.2 基础参数</h5><ul>
<li>SM2的曲线方程为$y^2=x^3+ax+b$，其中：<ul>
<li>$a:$ <label style="color:red"><code>0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC</code></label></li>
<li>$b:$ <font color=red><code>0x28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93</code></font></li>
<li>$p:$ <font color=red><code>0xFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF</code></font></li>
</ul>
</li>
<li>私钥长度：32字节</li>
<li>公钥长度：SM2__非压缩公钥格式<strong>字节串长度为65字节，</strong>压缩格式__长度为33字节，若公钥y坐标最后一位为0，则首字节为<font color=red><code>0x02</code></font>，否则为<font color=red><code>0x33</code></font>。非压缩格式公钥首字节为<font color=red><code>0x04</code></font>。</li>
<li>签名长度：64字节</li>
</ul>
<h4 id="3-密钥对生成"><a href="#3-密钥对生成" class="headerlink" title="3  密钥对生成"></a>3  密钥对生成</h4><p><strong>SM2密钥生成是指生成SM2算法的密钥对的过程，该密钥对包括私钥和与之对应的公钥。</strong></p>
<ul>
<li>输入：无</li>
<li>输出：<ul>
<li>k：SM2PrivateKey，SM2私钥</li>
<li>Q：SM2PublicKey，SM2公钥</li>
</ul>
</li>
</ul>
<ol>
<li>用随机数发生器产生整数$d∈[1,n-2]$；</li>
<li>$G$为基点，计算点$P=(x_P,y_P)=[d]G$。</li>
</ol>
<p>则私钥是$d$，公钥是$P$。</p>
<h4 id="4-签名算法"><a href="#4-签名算法" class="headerlink" title="4 签名算法"></a>4 签名算法</h4><h5 id="4-1-预处理1"><a href="#4-1-预处理1" class="headerlink" title="4.1 预处理1"></a>4.1 预处理1</h5><p>预处理1是指使用签名方的用户身份标识和签名方公钥，通过运算得到$Z$值的过程。$Z$值用于预处理2。</p>
<ul>
<li>输入：<ul>
<li>ID：字符串，用户身份标识</li>
<li>Q：SM2PublicKey，用户的公钥</li>
</ul>
</li>
<li>输出：<ul>
<li>Z：字节串，预处理1的输出</li>
</ul>
</li>
<li>计算公式：$Z=SM3(ENTL||ID||a||b||x_G||y_G||x_A||y_A)$</li>
<li>参数说明：<ul>
<li>$ENTL$：为由2个字节标识的ID的比特长度；</li>
<li>$ID$：为用户身份标识。无特殊约定的情况下，用户身份标识ID的长度为16字节，其默认值从左至右依次为： 0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38 </li>
<li>$a,b$：为系统曲线参数；</li>
<li>$x_G,y_G$为基点；</li>
<li>$x_A,y_A$为用户的公钥。</li>
</ul>
</li>
</ul>
<h5 id="4-2-预处理2"><a href="#4-2-预处理2" class="headerlink" title="4.2 预处理2"></a>4.2 预处理2</h5><p>预处理2是指使用$Z$值和待签名消息，通过SM3运算得到杂凑值H的过程。杂凑值H用于SM2数字签名。</p>
<ul>
<li>输入：<ul>
<li>Z：字节串，预处理2的输入</li>
<li>M：字节串，待签名消息</li>
</ul>
</li>
<li>输出：<ul>
<li>H：字节串，杂凑值</li>
</ul>
</li>
<li>计算公式：$H=SM3(Z||M)$</li>
</ul>
<h5 id="4-3-生成签名"><a href="#4-3-生成签名" class="headerlink" title="4.3 生成签名"></a>4.3 生成签名</h5><p>SM2签名是指使用预处理2的结果和签名者的私钥，通过签名计算得到签名结果的过程。</p>
<ul>
<li>输入：<ul>
<li>d：SM2PrivateKey，签名者私钥</li>
<li>H：字节串，预处理2的结果</li>
</ul>
</li>
<li>输出：<ul>
<li>sign：SM2Signature，签名值</li>
</ul>
</li>
</ul>
<p>设待签名的消息为M，为了获取消息M的数字签名$(r,s)$，作为签名者的用户A应实现以下运算步骤：</p>
<ol>
<li>置$\overline M=Z_A||M$；</li>
<li>计算$e=H_v(\overline M)$，将$e$的数据类型转化为整数；</li>
<li>用随机数发生器产生随机数$k∈[1,n-1]$；</li>
<li>计算椭圆曲线点$(x_1,y_1)=[k]G$，将$x_1$的数据类型转化为整数；</li>
<li>计算$r=(e+x_1) mod$ $n$，若$r=0$或$r+k=n$则返回第3步；</li>
<li>计算$s=((1+d_A)^{-1}·(k-r·d_A))mod$ $n$，若$s=0$则返回第3步；</li>
<li>将$r,s$转化为字节串。</li>
</ol>
<p>消息M的签名为$(r,s)$。</p>
<h5 id="4-4-签名验证"><a href="#4-4-签名验证" class="headerlink" title="4.4 签名验证"></a>4.4 签名验证</h5><p>SM2的签名验证是指使用预处理2的结果、签名值和签名者的公钥，通过验签计算确定签名是否通过验证的过程。</p>
<ul>
<li>输入：<ul>
<li>H：字节串，预处理2的结果</li>
<li>sign：SM2Signature，签名值</li>
<li>Q：PublicKey，签名者的公钥</li>
</ul>
</li>
<li>输出：为$True$表示验证通过，为$Falase$表示验证不通过。</li>
</ul>
<p>为了检验收到的消息M以及其数字签名$(r,s)$，作为验证者的用户B应实现以下运算步骤：</p>
<ol>
<li>检验 $r∈[1,n-1]$是否成立，若不成立则验证不通过；</li>
<li>检验 $s∈[1,n-1]$是否成立，若不成立则验证不通过；</li>
<li>置 $\overline M=Z_A||M$；</li>
<li>计算 $e=H_v(\overline M)$，将 $e$ 的数据类型转化为整数；</li>
<li>将 $r,s$ 的数据类型转换为整数，计算 $t=(r+s)mod$ $n$，若 $t=0$ ，则验证不通过；</li>
<li>计算椭圆曲线点 $(x_1,y_1)=[s]G+[t]P_A$；</li>
<li>将 $x_1$ 的数据类型转化为整数，计算 $R=(e+x_1)mod$ $n$ ，检验 $R=r$ 是否成立，若成立则验证通过；否则验证不通过。</li>
</ol>
<h5 id="4-5-签名验证原理"><a href="#4-5-签名验证原理" class="headerlink" title="4.5 签名验证原理"></a>4.5 签名验证原理</h5><p>$$<br>\begin{aligned}<br>[s]G+[t]P_A&amp;=sG+(r+s)P_A\\<br>           &amp;=sG+(r+s)d_AG\\<br>           &amp;=sG+sd_AG+rd_AG\\<br>           &amp;=(1+d_A)sG+rd_AG\\<br>           &amp;=(1+d_A)(1+d_A)^{-1}(k-rd_A)G+rd_AG\\<br>           &amp;=(k-rd_A)G+rd_AG\\<br>           &amp;=kG-rd_AG+rd_AG\\<br>           &amp;=kG\\<br>           &amp;=(x_1,y_1)<br>\end{aligned}<br>$$</p>
<h4 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h4><ul>
<li><a href="http://www.gb688.cn/bzgk/gb/std_list?p.p1=0&p.p90=circulation_date&p.p91=desc&p.p2=32918" target="_blank" rel="noopener">SM2国密标准文档</a></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>国密算法</tag>
      </tags>
  </entry>
</search>
